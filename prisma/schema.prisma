generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Phase {
  PREPAREDNESS
  READINESS
  ACTION
}

enum DataSource {
  DHM
  GLOFAS
  MANUAL
}

enum ActivitiesStatus {
  NOT_STARTED
  WORK_IN_PROGRESS
  COMPLETED
}

enum ActivityTypes {
  COMMUNICATION
  PAYOUT
  GENERAL
}

// ++++++++++++++++++ START: @el/beneficiaries +++++++++++++++++++++++++++

model Beneficiary {
  id            Int     @id @default(autoincrement()) @db.Integer()
  uuid          String  @unique @db.Uuid()
  walletAddress String?

  extras Json?

  createdAt   DateTime  @default(now())
  phoneNumber String?
  email       String?
  deletedAt   DateTime?

  @@map("tbl_beneficiaries")
}

// ++++++++++++++++++ END: @el/beneficiaries +++++++++++++++++++++++++++

model Stakeholders {
  id   Int    @id @default(autoincrement()) @db.Integer()
  uuid String @unique @default(uuid())

  name         String
  email        String?
  phone        String?
  designation  String
  organization String
  district     String
  municipality String

  stakeholdersGroups StakeholdersGroups[]

  isDeleted Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()

  @@map("tbl_stakeholders")
}

model StakeholdersGroups {
  id   Int    @id @default(autoincrement()) @db.Integer()
  uuid String @unique @default(uuid())

  name String

  stakeholders  Stakeholders[]
  activityComms ActivityComms[]

  isDeleted Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()

  @@map("tbl_stakeholders_groups")
}

model HazardTypes {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(uuid())

  name       String       @unique
  activities Activities[]
  triggers   Triggers[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()

  @@map("tbl_hazard_types")
}

model Phases {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(uuid())

  name       Phase        @unique
  activities Activities[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()

  @@map("tbl_phases")
}

model ActivityCategories {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(uuid())

  name       String
  activities Activities[]

  isDeleted Boolean @default(false)

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()

  @@map("tbl_activity_categories")
}

model Activities {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(uuid())

  title          String
  phase          Phases?             @relation(fields: [phaseId], references: [uuid])
  phaseId        String
  category       ActivityCategories? @relation(fields: [categoryId], references: [uuid])
  categoryId     String
  hazardType     HazardTypes?        @relation(fields: [hazardTypeId], references: [uuid])
  hazardTypeId   String
  responsibility String
  source         String
  description    String

  activityType ActivityTypes    @default(GENERAL)
  status       ActivitiesStatus @default(NOT_STARTED)

  activityComm ActivityComms?

  isDeleted Boolean @default(false)

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()

  @@map("tbl_activities")
}

model Triggers {
  id        Int    @id @default(autoincrement())
  uuid      String @unique
  repeatKey String @unique

  dataSource       DataSource
  location         String?
  repeatEvery      String?
  triggerStatement Json?      @db.JsonB()
  title            String?
  notes            String?

  readinessActivated  Boolean? @default(false)
  activationActivated Boolean? @default(false)

  readinessActivatedOn  DateTime?
  activationActivatedOn DateTime?

  triggerActivity String[]

  datas TriggersData[]

  hazardType   HazardTypes? @relation(fields: [hazardTypeId], references: [uuid])
  hazardTypeId String?

  isActive Boolean @default(true)

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()

  @@map("tbl_triggers")
}

model TriggersData {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(uuid())

  data Json @db.JsonB()

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()
  trigger   Triggers? @relation(fields: [triggerId], references: [uuid])
  triggerId String

  @@map("tbl_triggers_data")
}

model ActivityComms {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(uuid())

  campaignId String

  stakeholdersGroup   StakeholdersGroups @relation(fields: [stakeholdersGropuId], references: [uuid])
  stakeholdersGropuId String             @unique

  activity   Activities @relation(fields: [activityId], references: [uuid])
  activityId String     @unique

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()

  @@map("tbl_activity_comms")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Phase {
  PREPAREDNESS
  READINESS
  ACTIVATION
}

enum DataSource {
  DHM
  GLOFAS
  MANUAL
}

enum ActivitiesStatus {
  NOT_STARTED
  WORK_IN_PROGRESS
  COMPLETED
  DELAYED
}

enum ActivityTypes {
  GENERAL
  AUTOMATED
}

enum SettingDataType {
  STRING
  NUMBER
  BOOLEAN
  OBJECT
}

// ++++++++++++++++++ START: @el/beneficiaries +++++++++++++++++++++++++++

model Beneficiary {
  id            Int     @id @default(autoincrement()) @db.Integer()
  uuid          String  @unique @db.Uuid()
  walletAddress String?

  extras Json?

  beneficiaryGroups BeneficiaryGroups[]

  benTokens Int @default(0)

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()
  deletedAt DateTime?

  @@map("tbl_beneficiaries")
}

model BeneficiaryGroups {
  id   Int    @id @default(autoincrement()) @db.Integer()
  uuid String @unique @default(uuid())

  name String

  beneficiary Beneficiary[]

  tokensReserved Int @default(0)

  isDeleted Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()

  groupTokens GroupTokens[]
  reserveTokens ReserveToken[]

  @@map("tbl_beneficiaries_groups")
}

model GroupTokens {
  uuid String @unique @default(uuid())
  groupId String
  totalTokensReserved Int @default(0)

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()

  beneficiaryGroup    BeneficiaryGroups @relation(fields: [groupId], references: [uuid])
}

model ReserveToken {
  uuid String @unique @default(uuid())
  groupId String

  title String

  numberOfTokens Int @default(0)
  
  benefefiaryGroup BeneficiaryGroups @relation(fields: [groupId], references: [uuid])
}

model Vouchers {
  uuid             String @unique @default(uuid())
  name             String @unique
  totalVouchers    Int    @default(0)
  assignedVouchers Int    @default(0)

  @@map("tbl_vouchers")
}



// ++++++++++++++++++ END: @el/beneficiaries +++++++++++++++++++++++++++

// ++++++++++++++++++ START: @rumsan/settings +++++++++++++++++++++++++++
model Setting {
  name           String          @id @unique
  value          Json
  dataType       SettingDataType
  requiredFields String[]
  isReadOnly     Boolean         @default(false)
  isPrivate      Boolean         @default(true)

  @@map("tbl_settings")
}

// ++++++++++++++++++ END: @rumsan/settings +++++++++++++++++++++++++++

model Stakeholders {
  id   Int    @id @default(autoincrement()) @db.Integer()
  uuid String @unique @default(uuid())

  name         String
  email        String?
  phone        String?
  designation  String
  organization String
  district     String
  municipality String

  stakeholdersGroups StakeholdersGroups[]

  isDeleted Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()

  @@map("tbl_stakeholders")
}

model StakeholdersGroups {
  id   Int    @id @default(autoincrement()) @db.Integer()
  uuid String @unique @default(uuid())

  name String

  stakeholders Stakeholders[]
  // activityComms ActivityComms[]

  isDeleted Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()

  @@map("tbl_stakeholders_groups")
}

model HazardTypes {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(uuid())

  name       String       @unique
  activities Activities[]
  triggers   Triggers[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()

  @@map("tbl_hazard_types")
}

model Phases {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(uuid())

  name Phase @unique

  activities Activities[]
  triggers   Triggers[]

  requiredMandatoryTriggers Int? @default(0)
  requiredOptionalTriggers  Int? @default(0)

  receivedMandatoryTriggers Int? @default(0)
  receivedOptionalTriggers  Int? @default(0)

  isActive Boolean @default(false)

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()

  @@map("tbl_phases")
}

model ActivityCategories {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(uuid())

  name       String
  activities Activities[]

  isDeleted Boolean @default(false)

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()

  @@map("tbl_activity_categories")
}

model Activities {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(uuid())

  title          String
  phase          Phases?             @relation(fields: [phaseId], references: [uuid])
  phaseId        String
  category       ActivityCategories? @relation(fields: [categoryId], references: [uuid])
  categoryId     String
  hazardType     HazardTypes?        @relation(fields: [hazardTypeId], references: [uuid])
  hazardTypeId   String
  leadTime       String
  responsibility String
  source         String
  description    String

  status ActivitiesStatus @default(NOT_STARTED)

  isAutomated Boolean
  // activityType ActivityTypes @default(GENERAL)

  activityDocuments     Json? @db.JsonB()
  activityCommunication Json? @db.JsonB()
  activityPayout        Json? @db.JsonB()

  // triggers Triggers[]

  isDeleted Boolean @default(false)

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()

  @@map("tbl_activities")
}

model Triggers {
  id        Int    @id @default(autoincrement())
  uuid      String @unique
  repeatKey String @unique

  title            String?
  dataSource       DataSource
  location         String?
  repeatEvery      String?
  triggerStatement Json?      @db.JsonB()

  triggerDocuments Json?   @db.JsonB()
  notes            String?

  phase   Phases? @relation(fields: [phaseId], references: [uuid])
  phaseId String?

  hazardType   HazardTypes? @relation(fields: [hazardTypeId], references: [uuid])
  hazardTypeId String?

  // datas      TriggersData[]
  // activities Activities[]

  isMandatory Boolean @default(false)
  isTriggered Boolean @default(false)

  isDeleted Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()

  @@map("tbl_triggers")
}

model SourcesData {
  id   Int    @id @default(autoincrement())
  uuid String @unique @default(uuid())

  source   String?
  location String?
  data     Json    @db.JsonB()

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()

  @@map("tbl_sources_data")
}
